Yes, you can combine ExcelReader and @DataTableType to load user credentials from an Excel file and use that data in a Cucumber Examples section. To achieve this, we can integrate the Excel data with Cucumber's DataTable functionality and map it to specific column names for easy reference in the Examples.

Here’s how you can do it:

Goal:
You will keep your user credentials in an Excel file and then refer to them in the Examples section of your Cucumber feature file by the column name.

Steps:
1. ExcelReader (no change)
You’ll continue to use ExcelReader as you already have it for reading the data from the Excel file. The only thing we need to ensure is that the Excel file has columns like username and password.

2. Mapping Excel Data to Cucumber's DataTable
To map Excel data to Cucumber’s DataTable format, you need to use a @DataTableType method that reads data from Excel and converts it to a DataTable format. This allows you to refer to the data using column names in the Examples section.

Here is how you can achieve this

ExcelReader.java
No major changes here. This class will read data from your Excel file as before.

import org.apache.poi.ss.usermodel.*;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;

public class ExcelReader {
    public static List<String[]> readExcelData(String filePath, String sheetName) throws Exception {
        FileInputStream fis = new FileInputStream(new File(filePath));
        Workbook workbook = WorkbookFactory.create(fis);
        Sheet sheet = workbook.getSheet(sheetName);
        List<String[]> data = new ArrayList<>();

        for (Row row : sheet) {
            // Ensure row has at least two cells for username and password
            if (row.getPhysicalNumberOfCells() >= 2) {
                String username = row.getCell(0).getStringCellValue();
                String password = row.getCell(1).getStringCellValue();
                data.add(new String[]{username, password});
            }
        }

        workbook.close();
        return data;
    }
}

StepDefinitions.java
Here, we modify the @DataTableType annotation to map the Excel data into a DataTable, and then use the Examples section in your feature file to reference the username and password columns.

import io.cucumber.java.DataTableType;
import io.cucumber.java.en.*;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import java.util.List;
import java.util.Map;

public class StepDefinitions {
    WebDriver driver;
    LoginPage loginPage;

    @Given("I open the login page")
    public void openLoginPage() {
        driver = new ChromeDriver();
        driver.get("https://example.com/login");
        loginPage = new LoginPage(driver);
    }

    @When("I enter username {string} and password {string}")
    public void enterCredentials(String username, String password) {
        loginPage.enterUsername(username);
        loginPage.enterPassword(password);
        loginPage.clickLogin();
    }

    @Then("I should see a success message")
    public void verifyLogin() {
        loginPage.verifyLoginSuccess();
        driver.quit();
    }

    @DataTableType
    public List<Map<String, String>> getExcelData() throws Exception {
        List<Map<String, String>> excelData = new ArrayList<>();
        List<String[]> data = ExcelReader.readExcelData("test-data.xlsx", "Sheet1");

        for (String[] row : data) {
            Map<String, String> rowMap = Map.of(
                    "username", row[0],
                    "password", row[1]
            );
            excelData.add(rowMap);
        }
        return excelData;
    }
}

Key Notes:
getExcelData method: This method reads the data from the Excel file (test-data.xlsx, Sheet1) and converts it into a list of Map<String, String>, where each map represents a row with username and password as keys.
Mapping to DataTable: The @DataTableType converts the raw data from Excel into a format that Cucumber can easily work with (DataTable), allowing you to refer to the column names (e.g., username, password) directly in your feature file.

Feature File (login.feature)
Now in your Cucumber feature file, you can reference the username and password from the Examples section directly:

Feature: User Login
  Scenario Outline: Login with multiple credentials from Excel
    Given I open the login page
    When I enter username "<username>" and password "<password>"
    Then I should see a success message

  Examples: 
    | username  | password  |
    | user1     | pass1     |
    | user2     | pass2     |
    | user3     | pass3     |

Explanation:
You no longer need to manually populate the Examples table with values in the feature file. The values come from your Excel sheet.
The @DataTableType method converts the Excel data into a List<Map<String, String>>, where the keys in the map correspond to the column names (username and password).
In the scenario, Cucumber automatically uses these keys (<username>, <password>) to map values from the Excel file for each test iteration.

Test Execution
Each time you run your tests, Cucumber will:
Open the Excel file and retrieve the username and password.
Use the data in your scenario, iterating over each row in the Examples section.
Perform the login test using the credentials from Excel.
