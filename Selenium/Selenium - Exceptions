Selenium exceptions are unchecked
You are not required to handle them using try-catch or declare them with throws in method signatures.
You can catch them explicitly if you want to handle failures gracefully.

üîπ Common Selenium exceptions (unchecked):
All these extend org.openqa.selenium.WebDriverException, which in turn extends RuntimeException.
| Exception Class                    | Package                            | Description                                         |
| ---------------------------------- | ---------------------------------- | --------------------------------------------------- |
| `NoSuchElementException`           | `org.openqa.selenium`              | Element not found                                   |
| `TimeoutException`                 | `org.openqa.selenium`              | Explicit wait timed out                             |
| `StaleElementReferenceException`   | `org.openqa.selenium`              | Element is detached from DOM                        |
| `ElementClickInterceptedException` | `org.openqa.selenium`              | Click was intercepted by another element            |
| `ElementNotInteractableException`  | `org.openqa.selenium`              | Element not interactable (e.g., hidden or disabled) |
| `NoSuchFrameException`             | `org.openqa.selenium`              | Frame not found                                     |
| `NoSuchWindowException`            | `org.openqa.selenium`              | Window not found                                    |
| `InvalidElementStateException`     | `org.openqa.selenium`              | Invalid action on element (e.g., read-only input)   |
| `UnhandledAlertException`          | `org.openqa.selenium`              | Unexpected alert appeared                           |
| `UnexpectedAlertPresentException`  | `org.openqa.selenium`              | Alert appeared and not handled                      |
| `MoveTargetOutOfBoundsException`   | `org.openqa.selenium.interactions` | Trying to move to a point outside viewport          |
| `JavascriptException`              | `org.openqa.selenium`              | Error executing JavaScript                          |
| `SessionNotCreatedException`       | `org.openqa.selenium`              | Browser session could not be started                |
| `InvalidArgumentException`         | `org.openqa.selenium`              | Invalid arguments passed to WebDriver commands      |
| `WebDriverException`               | `org.openqa.selenium`              | Base class for all WebDriver-specific errors        |

‚úÖ Example:
try {
    driver.findElement(By.id("nonexistent")).click();
} catch (NoSuchElementException e) {
    System.out.println("Element not found.");
}

üî∏ 1. Catch Specific Exceptions First
try {
    driver.findElement(By.id("submit")).click();
} catch (NoSuchElementException e) {
    System.out.println("Element not found.");
} catch (ElementClickInterceptedException e) {
    System.out.println("Click was blocked by another element.");
} catch (WebDriverException e) {
    System.out.println("General WebDriver error: " + e.getMessage());
}

üî∏ 2. Use WebDriverWait Instead of Thread.sleep
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
try {
    WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.id("login")));
    element.click();
} catch (TimeoutException e) {
    System.out.println("Element was not clickable in time.");
}

Summary:
‚úÖ Selenium exceptions = unchecked
üîß You can catch them, but it‚Äôs not mandatory
üì¶ All extend RuntimeException

‚úÖ What is StaleElementReferenceException in Selenium?
StaleElementReferenceException is a runtime exception in Selenium that occurs when the web element you previously found becomes "stale" (invalid or detached) from the current DOM.

‚ùì Why It Happens:
The DOM has been updated or refreshed, but your element reference still points to the old version of the page.
JavaScript has dynamically changed the element.
You navigated to a different page, or triggered AJAX updates.

‚úÖ Real-World Analogy:
You picked up a file (element) from a desk (DOM), then the desk was replaced or rearranged ‚Äî now your reference (pointer to file) is outdated.

‚úÖ Example Code That Causes It:
WebElement button = driver.findElement(By.id("submit")); 
driver.navigate().refresh();  // DOM reloads
button.click();  // ‚ùå StaleElementReferenceException here

‚úÖ How to Handle It
üîπ 1. Refetch the element before using it
Re-locate the element after any DOM updates.

driver.navigate().refresh();
WebElement button = driver.findElement(By.id("submit"));  // locate again
button.click();  // ‚úÖ works now

üîπ 2. Use Try-Catch with Retry Logic
Useful for dynamic pages where the DOM might change at any moment.

public void clickWithRetry(By locator) {
    int attempts = 0;
    while (attempts < 3) {
        try {
            driver.findElement(locator).click();
            break;
        } catch (StaleElementReferenceException e) {
            attempts++;
        }
    }
}

üîπ 3. Use Explicit Wait (ExpectedConditions.refreshed)
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
WebElement element = wait.until(ExpectedConditions.refreshed(
        ExpectedConditions.elementToBeClickable(By.id("submit"))));
element.click();

‚úÖ Key Tips to Avoid It
| Tip                                              | Description                         |
| ------------------------------------------------ | ----------------------------------- |
| Avoid storing elements for too long              | Always re-find before acting        |
| Don't use element references across page reloads | Find again after refresh/navigation |
| Use dynamic wait instead of Thread.sleep()       | Avoid timing issues                 |
| Use `ExpectedConditions.refreshed()`             | Best for AJAX-heavy apps            |

‚úÖ Summary
| Feature   | Description                                                                 |
| --------- | --------------------------------------------------------------------------- |
| Exception | `StaleElementReferenceException`                                            |
| Reason    | Element is detached from current DOM                                        |
| Fixes     | Re-locate, retry with catch, use wait with `ExpectedConditions.refreshed()` |
