>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> LIST >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

🔰 Overview of List Interface
Maintains insertion order.
Allows duplicate elements.
Allows null elements.
Supports random access using indices.
Implements Collection, so inherits many common methods.

🧱 Types of List Implementations
| Implementation | Description                                          |
| -------------- | ---------------------------------------------------- |
| `ArrayList`    | Dynamic array, fast random access, not thread-safe.  |
| `LinkedList`   | Doubly linked list, good for insertions/deletions.   |
| `Vector`       | Synchronized version of ArrayList.                   |
| `Stack`        | LIFO (extends Vector), supports push/pop operations. |

🔹 1. ArrayList – Dynamic Array
import java.util.ArrayList;
public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();

        list.add("Apple");
        list.add("Banana");
        list.add("Apple");  // duplicates allowed
        list.add(null);     // null allowed

        System.out.println("ArrayList: " + list);  // [Apple, Banana, Apple, null]
    }
}

🔹 2. LinkedList – Doubly Linked List
import java.util.LinkedList;
public class LinkedListExample {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();

        list.add("Dog");
        list.addFirst("Cat");
        list.addLast("Elephant");

        System.out.println("LinkedList: " + list);  // [Cat, Dog, Elephant]
    }
}

🔹 3. Vector – Synchronized List
import java.util.Vector;
public class VectorExample {
    public static void main(String[] args) {
        Vector<Integer> vector = new Vector<>();

        vector.add(10);
        vector.add(20);

        System.out.println("Vector: " + vector);  // [10, 20]
    }
}

🔹 4. Stack – LIFO Stack
import java.util.Stack;
public class StackExample {
    public static void main(String[] args) {
        Stack<String> stack = new Stack<>();

        stack.push("A");
        stack.push("B");
        System.out.println("Top: " + stack.peek());  // B
        System.out.println("Popped: " + stack.pop());  // B
        System.out.println("Stack: " + stack);  // [A]
    }
}

🧰 Common Methods of List Interface
| Method                                | Description                       |
| ------------------------------------- | --------------------------------- |
| `add(E e)`                            | Adds element to end               |
| `add(int index, E e)`                 | Adds at specified index           |
| `get(int index)`                      | Returns element at index          |
| `set(int index, E e)`                 | Updates element at index          |
| `remove(int index)`                   | Removes element at index          |
| `remove(Object o)`                    | Removes first occurrence of value |
| `indexOf(Object o)`                   | First index of element            |
| `lastIndexOf(Object o)`               | Last index of element             |
| `size()`                              | Returns size                      |
| `isEmpty()`                           | Returns true if list is empty     |
| `clear()`                             | Removes all elements              |
| `contains(Object o)`                  | Checks if list contains element   |
| `subList(int fromIndex, int toIndex)` | Returns a portion of the list     |

✅ Full Example with All List Methods
import java.util.*;
public class ListMethodsExample {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();

        // add()
        list.add("Apple");
        list.add("Banana");
        list.add("Cherry");

        // add at index
        list.add(1, "Date");

        // get()
        System.out.println("Element at index 2: " + list.get(2));  // Banana

        // set()
        list.set(2, "Blueberry");

        // contains()
        System.out.println("Contains Apple? " + list.contains("Apple"));

        // indexOf and lastIndexOf
        list.add("Apple");  // Duplicate
        System.out.println("First index of Apple: " + list.indexOf("Apple"));
        System.out.println("Last index of Apple: " + list.lastIndexOf("Apple"));

        // remove by index
        list.remove(3);

        // remove by value
        list.remove("Blueberry");

        // subList
        System.out.println("SubList (0 to 2): " + list.subList(0, 2));

        // size
        System.out.println("Size: " + list.size());

        // clear
        list.clear();
        System.out.println("After clear, is empty? " + list.isEmpty());
    }
}

🧾 Output
Element at index 2: Banana
Contains Apple? true
First index of Apple: 0
Last index of Apple: 3
SubList (0 to 2): [Apple, Date]
Size: 3
After clear, is empty? true

🗂 Summary: List Implementations
| Implementation | Ordered | Allows Duplicates | Allows null | Thread-safe |
| -------------- | ------- | ----------------- | ----------- | ----------- |
| `ArrayList`    | ✅ Yes   | ✅ Yes             | ✅ Yes       | ❌ No        |
| `LinkedList`   | ✅ Yes   | ✅ Yes             | ✅ Yes       | ❌ No        |
| `Vector`       | ✅ Yes   | ✅ Yes             | ✅ Yes       | ✅ Yes       |
| `Stack`        | ✅ Yes   | ✅ Yes             | ✅ Yes       | ✅ Yes       |

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> SET >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

🧩 Key Characteristics of Set Interface
No duplicates allowed.
May or may not maintain order, depending on the implementation.
Can contain null, depending on the implementation.
Used when uniqueness of elements is important.

        HashSet<String> set = new HashSet<>();
        LinkedHashSet<String> set = new LinkedHashSet<>();
        TreeSet<Integer> set = new TreeSet<>();

🛑 TreeSet does not allow null elements and will throw NullPointerException.

📚 Common Methods of Set Interface
| Method                              | Description                                  |
| ----------------------------------- | -------------------------------------------- |
| `add(E e)`                          | Adds an element if it's not already present. |
| `addAll(Collection<? extends E> c)` | Adds all elements from another collection.   |
| `contains(Object o)`                | Returns true if the element is present.      |
| `remove(Object o)`                  | Removes the element.                         |
| `clear()`                           | Removes all elements.                        |
| `isEmpty()`                         | Returns true if the set is empty.            |
| `size()`                            | Returns number of elements.                  |
| `iterator()`                        | Returns an iterator to traverse the set.     |
| `retainAll(Collection<?> c)`        | Keeps only elements also in `c`.             |
| `removeAll(Collection<?> c)`        | Removes elements that are in `c`.            |

✅ Full Example with Common Set Methods
import java.util.*;
public class SetMethodsExample {
    public static void main(String[] args) {
        Set<String> fruits = new HashSet<>();

        // add()
        fruits.add("Apple");
        fruits.add("Banana");
        fruits.add("Cherry");

        // contains()
        System.out.println("Contains Banana? " + fruits.contains("Banana"));

        // size()
        System.out.println("Size: " + fruits.size());

        // remove()
        fruits.remove("Banana");

        // isEmpty()
        System.out.println("Is empty? " + fruits.isEmpty());

        // iterator()
        System.out.println("Iterating Set:");
        for (String fruit : fruits) {
            System.out.println(fruit);
        }

        // addAll()
        Set<String> moreFruits = new HashSet<>();
        moreFruits.add("Date");
        moreFruits.add("Apple"); // Already exists
        fruits.addAll(moreFruits);

        System.out.println("After addAll: " + fruits);

        // retainAll()
        Set<String> subset = new HashSet<>();
        subset.add("Apple");
        fruits.retainAll(subset);
        System.out.println("After retainAll: " + fruits);

        // clear()
        fruits.clear();
        System.out.println("After clear: " + fruits);
    }
}

🧾 Output (HashSet - unordered)
Contains Banana? true
Size: 3
Is empty? false
Iterating Set:
Apple
Cherry
After addAll: [Apple, Cherry, Date]
After retainAll: [Apple]
After clear: []

🗂 Summary: Set Implementations
| Implementation  | Maintains Order? | Allows null? | Sorted? | Thread-safe? |
| --------------- | ---------------- | ------------ | ------- | ------------ |
| `HashSet`       | ❌ No             | ✅ Yes (1)    | ❌ No    | ❌ No         |
| `LinkedHashSet` | ✅ Insertion      | ✅ Yes (1)    | ❌ No    | ❌ No         |
| `TreeSet`       | ✅ Sorted         | ❌ No         | ✅ Yes   | ❌ No         |


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> MAP >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

🔑 Key Features of the Map Interface
Each key maps to one value.
Duplicate keys are not allowed.
A map can contain null values and sometimes null keys, depending on the implementation.
It is not a subtype of Collection.

🧩 Common Methods of the Map Interface
| Method                        | Description                                            |
| ----------------------------- | ------------------------------------------------------ |
| `put(K key, V value)`         | Associates the specified value with the specified key. |
| `get(Object key)`             | Returns the value associated with the key.             |
| `remove(Object key)`          | Removes the key-value pair for the key.                |
| `containsKey(Object key)`     | Returns true if the key exists.                        |
| `containsValue(Object value)` | Returns true if the value exists.                      |
| `keySet()`                    | Returns a set view of the keys.                        |
| `values()`                    | Returns a collection view of the values.               |
| `entrySet()`                  | Returns a set view of key-value mappings.              |


        HashMap<Integer, String> map = new HashMap<>();
        LinkedHashMap<Integer, String> map = new LinkedHashMap<>();
        TreeMap<Integer, String> map = new TreeMap<>();
        Hashtable<Integer, String> map = new Hashtable<>();
    
📘 Summary Table
| Implementation  | Order     | Null Keys | Null Values | Thread-safe |
| --------------- | --------- | --------- | ----------- | ----------- |
| `HashMap`       | No        | 1 allowed | Yes         | No          |
| `LinkedHashMap` | Insertion | 1 allowed | Yes         | No          |
| `TreeMap`       | Sorted    | No        | Yes         | No          |
| `Hashtable`     | No        | No        | No          | Yes         |

TreeMap - Maintains natural order (or custom order with a comparator).
Thread-safe = Yes >>>> Synchronized
Thread-safe = No >>>>> Not Synchronized



✅ Commonly Used Methods of Map<K, V>
Let's consider a Map<Integer, String> where keys are Integer and values are String.
import java.util.*;
public class MapMethodsExample {
    public static void main(String[] args) {
        Map<Integer, String> map = new HashMap<>();

        // put()
        map.put(1, "Apple");
        map.put(2, "Banana");
        map.put(3, "Cherry");

        // get()
        System.out.println("Value for key 2: " + map.get(2));

        // containsKey() and containsValue()
        System.out.println("Contains key 3? " + map.containsKey(3));
        System.out.println("Contains value 'Banana'? " + map.containsValue("Banana"));

        // keySet()
        Set<Integer> keys = map.keySet(); 

        // values()
        Collection<String> values = map.values();  // [Avocado]
        System.out.println("All values: " + values);

        // entrySet()
        System.out.println("All entries:");
        for (Map.Entry<Integer, String> entry : map.entrySet()) {
            System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
 System.out.println("All keys: " + keys);
        }

        // remove()
        map.remove(2);
        System.out.println("After removing key 2: " + map);

        // putAll()
        Map<Integer, String> newMap = new HashMap<>();
        newMap.put(4, "Date");
        map.putAll(newMap);
        System.out.println("After putAll: " + map);

        // size()
        System.out.println("Map size: " + map.size());

        // isEmpty()
        System.out.println("Is map empty? " + map.isEmpty());

        // clear()
        map.clear();
        System.out.println("Map after clear: " + map);
    }
}

🔍 Advanced Map Methods (Java 8+) with Examples

1. V getOrDefault(Object key, V defaultValue)
Returns the value for the key, or returns the default if the key is not found.
map.put(1, "Apple");
System.out.println(map.getOrDefault(1, "Unknown")); // Output: Apple
System.out.println(map.getOrDefault(2, "Unknown")); // Output: Unknown

2. void forEach(BiConsumer<? super K, ? super V> action)
Performs an action for each entry in the map.
map.forEach((key, value) -> {
    System.out.println("Key: " + key + ", Value: " + value);
});

3. V putIfAbsent(K key, V value)
Puts the value only if the key is not already present.
map.putIfAbsent(2, "Banana"); // Will add
map.putIfAbsent(1, "Avocado"); // Won't add, key 1 already exists
System.out.println(map); // {1=Apple, 2=Banana}

4. V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
Recomputes the value for the key using a function. If the key is absent, value is computed with null.
map.compute(1, (key, val) -> val.toUpperCase()); // Apple -> APPLE
map.compute(3, (key, val) -> "Cherry");          // Adds key 3 with value "Cherry"
System.out.println(map); // {1=APPLE, 2=Banana, 3=Cherry}

5. V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)
Only computes and inserts the value if the key is not already present.
map.computeIfAbsent(4, key -> "Date");
map.computeIfAbsent(2, key -> "Dummy"); // Won't change, key 2 already exists
System.out.println(map); // {1=APPLE, 2=Banana, 3=Cherry, 4=Date}

6. V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
Only recomputes if the key is already present.
map.computeIfPresent(3, (key, val) -> val + " Pie");
map.computeIfPresent(5, (key, val) -> "Fig"); // Won't add because key 5 doesn't exist
System.out.println(map); // {1=APPLE, 2=Banana, 3=Cherry Pie, 4=Date}

7. V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)
If key doesn't exist, insert value. If it exists, merge using remapping function.
map.merge(2, " Smoothie", (oldVal, newVal) -> oldVal + newVal);
map.merge(5, "Elderberry", (oldVal, newVal) -> oldVal + newVal);
System.out.println(map); 
// {1=APPLE, 2=Banana Smoothie, 3=Cherry Pie, 4=Date, 5=Elderberry}

📘 Full Java Program (Advanced Methods)
import java.util.*;
public class AdvancedMapMethodsExample {
    public static void main(String[] args) {
        Map<Integer, String> map = new HashMap<>();

        // putIfAbsent
        map.putIfAbsent(1, "Apple");
        map.putIfAbsent(2, "Banana");

        // getOrDefault
        System.out.println("Key 1: " + map.getOrDefault(1, "Default"));
        System.out.println("Key 3: " + map.getOrDefault(3, "Default"));

        // compute
        map.compute(1, (key, val) -> val.toUpperCase());
        map.compute(3, (key, val) -> "Cherry");

        // computeIfAbsent
        map.computeIfAbsent(4, key -> "Date");

        // computeIfPresent
        map.computeIfPresent(3, (key, val) -> val + " Pie");

        // merge
        map.merge(2, " Smoothie", (oldVal, newVal) -> oldVal + newVal);
        map.merge(5, "Elderberry", (oldVal, newVal) -> oldVal + newVal);

        // forEach
        System.out.println("\nFinal Map:");
        map.forEach((key, value) -> System.out.println(key + " -> " + value));
    }
}

🧾 Output
Key 1: Apple
Key 3: Default

Final Map:
1 -> APPLE
2 -> Banana Smoothie
3 -> Cherry Pie
4 -> Date
5 -> Elderberry
