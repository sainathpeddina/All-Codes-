‚úÖ 1. Checked Exceptions
‚úÖ 2. Unchecked Exceptions
These determine how the Java compiler enforces exception handling.

‚úÖ 1. Checked Exceptions
üîπ What Are They?
Exceptions that must be either caught or declared in the method signature using throws.
They are checked at compile-time.
Represent recoverable conditions (e.g., file not found, invalid input/output).

üîπ Example:
public void readFile() throws IOException {
    FileReader file = new FileReader("somefile.txt");
}

üîπ Common Checked Exceptions:
| Exception               | Description                          |
| ----------------------- | ------------------------------------ |
| `IOException`           | Error during input/output operations |
| `FileNotFoundException` | File not found                       |
| `SQLException`          | SQL/database access error            |
| `ParseException`        | Failed to parse a date/format        |
| `InterruptedException`  | A thread was interrupted             |


‚úÖ 2. Unchecked Exceptions
üîπ What Are They?
Runtime exceptions that don't need to be declared or caught.
Checked only at runtime, not enforced at compile-time.
Represent programming errors (e.g., null pointer, array out of bounds).

üîπ Example:
public void divide(int a, int b) {
    int result = a / b;  // Might throw ArithmeticException
}

üîπ Common Unchecked Exceptions:
| Exception                        | Description                                       |
| -------------------------------- | ------------------------------------------------- |
| `ArithmeticException`            | Divide by zero                                    |
| `NullPointerException`           | Accessing an object that is `null`                |
| `ArrayIndexOutOfBoundsException` | Accessing invalid array index                     |
| `IllegalArgumentException`       | Invalid argument passed to method                 |
| `NumberFormatException`          | Invalid number format (`Integer.parseInt("abc")`) |

‚úÖ Diagram Summary
             Exception
                 |
   ----------------------------------
   |                                |
Checked Exception         Unchecked Exception (RuntimeException)
   |                                |
IOException, SQLException      NullPointerException, ArithmeticException

‚úÖ Key Differences
| Feature                     | Checked Exception                                    | Unchecked Exception                 |
| --------------------------- | ---------------------------------------------------- | ----------------------------------- |
| Compile-time check          | ‚úÖ Yes                                                | ‚ùå No                                |
| Needs `throws` or try-catch | ‚úÖ Yes                                                | ‚ùå Optional                          |
| Type                        | Extends `Exception` (but **not** `RuntimeException`) | Extends `RuntimeException`          |
| Typical cause               | External conditions (I/O, DB, network)               | Programming bugs (nulls, bad logic) |


‚úÖ Custom Exceptions
üîπ Custom Checked Exception:
class MyCheckedException extends Exception {
    public MyCheckedException(String message) {
        super(message);
    }
}

üîπ Custom Unchecked Exception:
class MyUncheckedException extends RuntimeException {
    public MyUncheckedException(String message) {
        super(message);
    }
}

‚úÖ throw: Actual Exception Thrower
üîπ Syntax:
throw new ExceptionType("message");

‚úÖ Example:
public void checkAge(int age) {
    if (age < 18) {
        throw new ArithmeticException("Not eligible to vote");
    }
}
Immediately stops the program or goes to the nearest catch block.

‚úÖ throws: Declares a Possible Exception
üîπ Syntax:
public void methodName() throws ExceptionType1, ExceptionType2

‚úÖ Example:
public void readFile() throws IOException {
    FileReader fr = new FileReader("file.txt");
}
This tells the caller of the method: "You must handle or declare this exception".

üîÑ Example: Using Both Together
public void riskyMethod() throws IOException {
    throw new IOException("File not found");
}

throws says this method might throw an exception.
throw actually throws it.

‚úÖ Analogy
throws = "I might throw something at you!" (warning)
throw = "I am throwing it now!" (action)

üß† Key Points:
You must use throws to declare checked exceptions (like IOException, SQLException).
You can use throw for both checked and unchecked exceptions.

| Usage       | Location           | Purpose                                           |
| ----------- | ------------------ | ------------------------------------------------- |
| `throws`    | Method declaration | Declares that the method might throw an exception |
| `try-catch` | Method body        | Handles exceptions when calling risky code        |

| Keyword  | Used in                    | Purpose                                       |
| -------- | -------------------------- | --------------------------------------------- |
| `throw`  | Inside method or try block | To actually throw an exception                |
| `throws` | In method signature        | To declare that a method may throw exceptions |
