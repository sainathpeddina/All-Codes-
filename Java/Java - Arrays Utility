ðŸ”· Overview of Arrays Class
Belongs to: java.util.Arrays
Purpose: Operate on arrays (primitive and object types)
Supports: Sorting, searching, comparison, filling, stream conversion, etc.

âœ… Aâ€“Z Methods of Arrays Class (with Examples)
| **Method**                        | **Description**                                            | **Example**                                |
| --------------------------------- | ---------------------------------------------------------- | ------------------------------------------ |
| `asList(T... a)`                  | Converts array to a fixed-size list backed by the array    | `Arrays.asList("A", "B")`                  |
| `binarySearch(array, key)`        | Searches for `key` in **sorted** array using binary search | `Arrays.binarySearch(arr, 5)`              |
| `compare(arr1, arr2)`             | Compares arrays lexicographically                          | `Arrays.compare(a1, a2)`                   |
| `copyOf(array, newLength)`        | Copies array to new array with specified length            | `Arrays.copyOf(arr, 5)`                    |
| `copyOfRange(array, from, to)`    | Copies specified range (`from` to `to-1`) to a new array   | `Arrays.copyOfRange(arr, 1, 4)`            |
| `deepEquals(arr1, arr2)`          | Compares nested arrays for equality                        | `Arrays.deepEquals(a1, a2)`                |
| `deepHashCode(Object[] a)`        | Returns deep hash code for an array with nested objects    | `Arrays.deepHashCode(arr)`                 |
| `deepToString(Object[] a)`        | Converts multidimensional array to a string                | `Arrays.deepToString(arr)`                 |
| `equals(arr1, arr2)`              | Compares arrays for equality element by element            | `Arrays.equals(a1, a2)`                    |
| `fill(array, val)`                | Fills the array with specified value                       | `Arrays.fill(arr, 0)`                      |
| `fill(array, from, to, val)`      | Fills specified range of the array with value              | `Arrays.fill(arr, 1, 3, 5)`                |
| `hashCode(array)`                 | Returns hash code based on contents                        | `Arrays.hashCode(arr)`                     |
| `mismatch(arr1, arr2)`            | Returns index of first mismatch or -1 if arrays are equal  | `Arrays.mismatch(a1, a2)`                  |
| `parallelPrefix(array, op)`       | Applies cumulative operation in parallel                   | `Arrays.parallelPrefix(arr, Integer::sum)` |
| `parallelSetAll(array, i -> val)` | Sets elements using a generator function in parallel       | `Arrays.parallelSetAll(arr, i -> i * i)`   |
| `parallelSort(array)`             | Sorts large arrays in parallel                             | `Arrays.parallelSort(arr)`                 |
| `setAll(array, i -> val)`         | Sets each element using a generator                        | `Arrays.setAll(arr, i -> i + 1)`           |
| `sort(array)`                     | Sorts the array using natural ordering                     | `Arrays.sort(arr)`                         |
| `sort(array, from, to)`           | Sorts a specified range                                    | `Arrays.sort(arr, 1, 4)`                   |
| `spliterator(array)`              | Returns a `Spliterator` over array elements                | `Arrays.spliterator(arr)`                  |
| `stream(array)`                   | Converts array to a `Stream`                               | `Arrays.stream(arr)`                       |
| `stream(array, from, to)`         | Stream over array subrange                                 | `Arrays.stream(arr, 1, 4)`                 |
| `toString(array)`                 | Returns a string representation                            | `Arrays.toString(arr)`                     |

ðŸ”¸ Examples for Key Methods
import java.util.Arrays;
public class ArraysExample {
    public static void main(String[] args) {
        int[] nums = {5, 2, 8, 1};

        // Sort
        Arrays.sort(nums);
        System.out.println("Sorted: " + Arrays.toString(nums)); // [1, 2, 5, 8]

        // Binary Search (must be sorted)
        int idx = Arrays.binarySearch(nums, 5);
        System.out.println("Index of 5: " + idx); // 2

        // Copy
        int[] copy = Arrays.copyOf(nums, 6);
        System.out.println("Copy: " + Arrays.toString(copy)); // [1, 2, 5, 8, 0, 0]

        // Fill
        Arrays.fill(copy, 4, 6, 9);
        System.out.println("Filled: " + Arrays.toString(copy)); // [1, 2, 5, 8, 9, 9]

        // Equals
        boolean isEqual = Arrays.equals(nums, new int[]{1, 2, 5, 8});
        System.out.println("Is Equal: " + isEqual); // true

        // Stream
        long count = Arrays.stream(nums).filter(n -> n > 2).count();
        System.out.println("Count > 2: " + count); // 2
    }
}

âœ… Notes:
asList() returns a fixed-size list (cannot add/remove).


